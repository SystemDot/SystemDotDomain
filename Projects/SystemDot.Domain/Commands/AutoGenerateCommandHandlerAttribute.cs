using System;

namespace SystemDot.Domain.Commands
{
    public class AutoGenerateCommandHandlerAttribute : Attribute
    {
        public Type AggregateType { get; set; }

        public string AggregateMethodName { get; set; }
    }

    //public static Configurer RegisterAutoDomainHandlersInAssemblyOf<T>(this Configurer configurer)
    //{
    //    configurer
    //        .RegisterHandlers(r => GetHandlersInAssemblyOf<T>()
    //        .ForEach(r.RegisterHandler));

    //    return configurer;
    //}

    //static IEnumerable<Core.IMessageHandler> GetHandlersInAssemblyOf<T>()
    //{
    //    var handlers = new List<Core.IMessageHandler>();

    //    var handlerSpecifications = new List<AutoGeneratedCommandHandlerSpec>();

    //     typeof(T)
    //        .GetTypesInAssembly()
    //        .WhereNormalConcrete()
    //        .ForEach(t =>
    //        {
    //            var a = t.GetCustomAttribute<AutoGenerateCommandHandlerAttribute>(false);

    //            if (a != null)
    //            {
    //                handlerSpecifications.Add(CreateSpecification(t, a));
    //            }
    //        });

    //    return null;
    //}

    //static AutoGeneratedCommandHandlerSpec CreateSpecification(Type messageType, AutoGenerateCommandHandlerAttribute attribute)
    //{
    //    return new AutoGeneratedCommandHandlerSpec
    //    {
    //        MessageType = messageType,
    //        AggregateType = attribute.AggregateType,
    //        AggregateMethodName = attribute.AggregateMethodName
    //    };
    //}

    //public class AutoGeneratedCommandHandlerSpec
    //{
    //    public Type MessageType { get; set; }

    //    public Type AggregateType { get; set; }

    //    public string AggregateMethodName { get; set; }
    //}
}